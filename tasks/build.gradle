/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

defaultTasks 'clean', 'run'

task hello {
   doLast {
      println 'Hello World!'
   }
}

task upper {
   doLast {
      String someString = 'mY_nAmE'
      println "Original: $someString"
      println "Upper case: ${someString.toUpperCase()}"
   }
}

task count {
   doLast {
     4.times { print "$it "}
  }
}

task intro {
  dependsOn hello
  doLast {
    println "I'm Gradle"
  }
}

task taskX {
   dependsOn 'taskY'
   doLast {
     println 'taskX'
   }
}

task taskY {
   doLast {
     println 'taskY'
   }
}

4.times {
  counter -> 
    task "task$counter" {
       doLast {
         println "I'm task number $counter"
       }
    }
}

task0.dependsOn task2, task3

hello.doLast {
   println "Greetings from the $hello.name task."
}

task myTask {
   ext.myProperty = "myValue"
}

task printTaskProperties {
   doLast {
     println myTask.myProperty
   }
}

task loadfile {
  doLast {
    def files = file('./antLoadfileResources').listFiles().sort()
    files.each { File file -> 
       if (file.isFile()) {
          ant.loadfile(srcFile: file, property: file.name) 
          println " *** $file.name ***"
          println "${ant.properties[file.name]}"
       }
    }
  }
}

task checksum {
   doLast {
      fileList('./antLoadfileResources').each { File file -> ant.checksum(file: file, property: "cs_$file.name")
          println "$file.name Checksum: ${ant.properties["cs_$file.name"]}"
      }
   }
}

task loadfile2 {
   doLast {
       fileList('./antLoadfileResources').each {
          File file -> ant.loadfile(srcFile: file, property: file.name)
          println "I'm fond of $file.name"
       }
   }
}

File[] fileList(String dir) {
   file(dir).listFiles({file -> file.isFile()} as FileFilter).sort()
}

task clean {
   doLast {
     println "Default Cleaning!"
   }
}

task run {
   doLast {
     println "Default Running!"
   }
}

task other {
   doLast {
     println "I'm not a default task!"
   }
}


task distribution {
   doLast {
      println "We build the zip with version=$version"
   }
}


task release {
   dependsOn 'distribution'
   doLast {
      println "We release now"
   }
}


gradle.taskGraph.whenReady {
   taskGraph -> if (taskGraph.hasTask(":release")) {
      version = "1.0"
   } else {
      version = "1.0-SNAPSHOT"
   } 
}
